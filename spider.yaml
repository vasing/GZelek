# I2C for BME280
i2c:
  sda: GPIO22
  scl: GPIO21
  scan: true
  frequency: 10kHz
  id: bus_a

# BME280
sensor:
  - platform: bme280_i2c
    temperature:
      name: "Temperatur"
      id: bme280_temperature
    pressure:
      name: "Luftdruck"
      id: bme280_pressure
    humidity:
      name: "Relative Luftfeuchtigkeit"
      id: bme280_humidity
    i2c_id: bus_a
    address: 0x76
    update_interval: 15s
  # - platform: template
    # name: "Altitude"
    # lambda: |-
      # const float STANDARD_SEA_LEVEL_PRESSURE = 1013.25; //in hPa, see note
      # return ((id(bme280_temperature).state + 273.15) / 0.0065) *
        # (powf((STANDARD_SEA_LEVEL_PRESSURE / id(bme280_pressure).state), 0.190234) - 1); // in meter
    # update_interval: 15s
    # icon: 'mdi:signal'
    # unit_of_measurement: 'm'
  # - platform: absolute_humidity
    # name: "Absolute Humidity"
    # temperature: bme280_temperature
    # humidity: bme280_humidity
  # - platform: template
    # name: "Dew Point"
    # lambda: |-
      # return (243.5*(log(id(bme280_humidity).state/100)+((17.67*id(bme280_temperature).state)/
      # (243.5+id(bme280_temperature).state)))/(17.67-log(id(bme280_humidity).state/100)-
      # ((17.67*id(bme280_temperature).state)/(243.5+id(bme280_temperature).state))));
    # unit_of_measurement: Â°C
    # icon: 'mdi:thermometer-alert'    


# Example configuration entry
output:
  - platform: ledc
    pin: GPIO33
    frequency: 20000 Hz
    id: gpio33_PWM
    max_power: 1.0

# Example usage in a light
fan:
    platform: speed
    output: gpio33_PWM
    name: "Abluft"
    id: abluft